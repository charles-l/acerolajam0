// copied from https://github.com/ftommasi/raylib-odin

//
// THIS FILE WAS AUTOGENERATED
//

package raylib

import _c "core:c"

@(default_calling_convention="c")
foreign {
    @(link_name="GuiListElement")
    gui_list_element :: proc(
        bounds : Rectangle,
        text : cstring,
        active : bool,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="ConvertHSVtoRGB")
    convert_hs_vto_rgb :: proc(hsv : Vector3) -> Vector3 ---;

    @(link_name="ConvertRGBtoHSV")
    convert_rg_bto_hsv :: proc(rgb : Vector3) -> Vector3 ---;

    @(link_name="GetTextWidth")
    get_text_width :: proc(text : cstring) -> _c.int ---;

    @(link_name="GetTextBounds")
    get_text_bounds :: proc(
        control : _c.int,
        bounds : Rectangle
    ) -> Rectangle ---;

    @(link_name="GetTextIcon")
    get_text_icon :: proc(
        text : cstring,
        icon_id : ^_c.int
    ) -> cstring ---;

    @(link_name="GuiDrawText")
    gui_draw_text :: proc(
        text : cstring,
        bounds : Rectangle,
        alignment : _c.int,
        tint : Color
    ) ---;

    @(link_name="GuiTextSplit")
    gui_text_split :: proc(
        text : cstring,
        count : ^_c.int,
        text_row : ^_c.int
    ) -> ^cstring ---;

    @(link_name="GuiEnable")
    gui_enable :: proc() ---;

    @(link_name="GuiDisable")
    gui_disable :: proc() ---;

    @(link_name="GuiLock")
    gui_lock :: proc() ---;

    @(link_name="GuiUnlock")
    gui_unlock :: proc() ---;

    @(link_name="GuiState")
    gui_state :: proc(state : _c.int) ---;

    @(link_name="GuiSetFont")
    gui_font :: proc(font : Font) ---;

    @(link_name="GuiFade")
    gui_fade :: proc(alpha : _c.float) ---;

    @(link_name="GuiSetStyle")
    gui_set_style :: proc(
        control : _c.int,
        property : _c.int,
        value : _c.int
    ) ---;

    @(link_name="GuiGetStyle")
    gui_get_style :: proc(
        control : _c.int,
        property : _c.int
    ) -> _c.int ---;

    @(link_name="GuiWindowBox")
    gui_window_box :: proc(
        bounds : Rectangle,
        text : cstring
    ) -> bool ---;

    @(link_name="GuiGroupBox")
    gui_group_box :: proc(
        bounds : Rectangle,
        text : cstring
    ) ---;

    @(link_name="GuiLine")
    gui_line :: proc(
        bounds : Rectangle,
        text : cstring
    ) ---;

    @(link_name="GuiPanel")
    gui_panel :: proc(bounds : Rectangle) ---;

    @(link_name="GuiScrollPanel")
    gui_scroll_panel :: proc(
        bounds : Rectangle,
        content : Rectangle,
        scroll : ^Vector2
    ) -> Rectangle ---;

    @(link_name="GuiLabel")
    gui_label :: proc(
        bounds : Rectangle,
        text : cstring
    ) ---;

    @(link_name="GuiButton")
    gui_button :: proc(
        bounds : Rectangle,
        text : cstring
    ) -> bool ---;

    @(link_name="GuiLabelButton")
    gui_label_button :: proc(
        bounds : Rectangle,
        text : cstring
    ) -> bool ---;

    @(link_name="GuiImageButton")
    gui_image_button :: proc(
        bounds : Rectangle,
        texture : Texture2D
    ) -> bool ---;

    @(link_name="GuiImageButtonEx")
    gui_image_button_ex :: proc(
        bounds : Rectangle,
        texture : Texture2D,
        tex_source : Rectangle,
        text : cstring
    ) -> bool ---;

    @(link_name="GuiToggle")
    gui_toggle :: proc(
        bounds : Rectangle,
        text : cstring,
        active : bool
    ) -> bool ---;

    @(link_name="GuiToggleGroup")
    gui_toggle_group :: proc(
        bounds : Rectangle,
        text : cstring,
        active : _c.int
    ) -> _c.int ---;

    @(link_name="GuiCheckBox")
    gui_check_box :: proc(
        bounds : Rectangle,
        text : cstring,
        checked : bool
    ) -> bool ---;

    @(link_name="GuiComboBox")
    gui_combo_box :: proc(
        bounds : Rectangle,
        text : cstring,
        active : _c.int
    ) -> _c.int ---;

    @(link_name="GuiDropdownBox")
    gui_dropdown_box :: proc(
        bounds : Rectangle,
        text : cstring,
        active : ^_c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiSpinner")
    gui_spinner :: proc(
        bounds : Rectangle,
        value : ^_c.int,
        min_value : _c.int,
        max_value : _c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiValueBox")
    gui_value_box :: proc(
        bounds : Rectangle,
        value : ^_c.int,
        min_value : _c.int,
        max_value : _c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiTextBox")
    gui_text_box :: proc(
        bounds : Rectangle,
        text : cstring,
        text_size : _c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiTextBoxMulti")
    gui_text_box_multi :: proc(
        bounds : Rectangle,
        text : cstring,
        text_size : _c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiSliderPro")
    gui_slider_pro :: proc(
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        slider_width : _c.int,
        show_value : bool
    ) -> _c.float ---;

    @(link_name="GuiSlider")
    gui_slider :: proc(
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float ---;

    @(link_name="GuiSliderBar")
    gui_slider_bar :: proc(
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float ---;

    @(link_name="GuiProgressBar")
    gui_progress_bar :: proc(
        bounds : Rectangle,
        text : cstring,
        value : _c.float,
        min_value : _c.float,
        max_value : _c.float,
        show_value : bool
    ) -> _c.float ---;

    @(link_name="GuiStatusBar")
    gui_status_bar :: proc(
        bounds : Rectangle,
        text : cstring
    ) ---;

    @(link_name="GuiDummyRec")
    gui_dummy_rec :: proc(
        bounds : Rectangle,
        text : cstring
    ) ---;

    @(link_name="GuiScrollBar")
    gui_scroll_bar :: proc(
        bounds : Rectangle,
        value : _c.int,
        min_value : _c.int,
        max_value : _c.int
    ) -> _c.int ---;

    @(link_name="GuiListView")
    gui_list_view :: proc(
        bounds : Rectangle,
        text : cstring,
        active : ^_c.int,
        scroll_index : ^_c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiListViewEx")
    gui_list_view_ex :: proc(
        bounds : Rectangle,
        text : ^cstring,
        count : _c.int,
        enabled : ^_c.int,
        active : ^_c.int,
        focus : ^_c.int,
        scroll_index : ^_c.int,
        edit_mode : bool
    ) -> bool ---;

    @(link_name="GuiColorPanel")
    gui_color_panel :: proc(
        bounds : Rectangle,
        color : Color
    ) -> Color ---;

    @(link_name="GuiColorBarAlpha")
    gui_color_bar_alpha :: proc(
        bounds : Rectangle,
        alpha : _c.float
    ) -> _c.float ---;

    @(link_name="GuiColorBarHue")
    gui_color_bar_hue :: proc(
        bounds : Rectangle,
        hue : _c.float
    ) -> _c.float ---;

    @(link_name="GuiColorPicker")
    gui_color_picker :: proc(
        bounds : Rectangle,
        color : Color
    ) -> Color ---;

    @(link_name="GuiMessageBox")
    gui_message_box :: proc(
        bounds : Rectangle,
        window_title : cstring,
        message : cstring,
        buttons : cstring
    ) -> _c.int ---;

    @(link_name="GuiGrid")
    gui_grid :: proc(
        bounds : Rectangle,
        spacing : _c.float,
        subdivs : _c.int
    ) -> Vector2 ---;

    @(link_name="GuiLoadStyle")
    gui_load_style :: proc(file_name : cstring) ---;

    @(link_name="GuiLoadStyleProps")
    gui_load_style_props :: proc(
        props : ^_c.int,
        count : _c.int
    ) ---;

    @(link_name="GuiLoadStyleDefault")
    gui_load_style_default :: proc() ---;

    @(link_name="GuiUpdateStyleComplete")
    gui_update_style_complete :: proc() ---;

    @(link_name="GuiIconText")
    gui_icon_text :: proc(
        icon_id : _c.int,
        text : cstring
    ) -> cstring ---;

}
